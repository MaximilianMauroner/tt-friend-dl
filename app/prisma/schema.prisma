// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mysql"
    // NOTE: When using mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? // @db.Text
    access_token      String? // @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? // @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id               String          @id @default(cuid())
    name             String?         @unique
    email            String?         @unique
    emailVerified    DateTime?
    image            String?
    accounts         Account[]
    sessions         Session[]
    seenMessages     MessageSeenBy[]
    sentMessages     Message[]       @relation("FromUser")
    receivedMessages Message[]       @relation("ToUser")
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Message {
    id         String @id @default(cuid())
    content    String
    fromUserId String
    toUserId   String
    fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade)
    toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade)

    created_at DateTime
    seenBy     MessageSeenBy[]

    replies   Message[] @relation("replies")
    replyTo   Message?  @relation("replies", fields: [replyToId], references: [id])
    replyToId String?   @map("replyToId")

    @@unique([content, fromUserId, toUserId, created_at], name: "messageIdentifier")
}

model MessageSeenBy {
    messageId String
    userId    String
    seenAt    DateTime @default(now())
    user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    message   Message  @relation(fields: [messageId], references: [id], onDelete: Cascade)

    @@id([messageId, userId])
}
