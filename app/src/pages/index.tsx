import { HandThumbUpIcon } from "@heroicons/react/24/outline";
import { useSession } from "next-auth/react";
import Head from "next/head";
import Link from "next/link";
import NavBar from "~/components/nav";
import { type RouterOutputs, api } from "~/utils/api";

export default function Home() {
    useSession({
        required: process.env.NODE_ENV !== "development",
    });
    return (
        <>
            <Head>
                <title>TikTok Message Downloader</title>
                <meta name="description" content="Generated by create-t3-app" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main
                className={
                    "h-full min-h-screen text-gray-900 dark:bg-slate-800 dark:text-gray-200"
                }
            >
                <DisplayMessages />
            </main>
            <NavBar />
        </>
    );
}

const DisplayMessages = () => {
    const { data, isLoading } = api.messages.list.useQuery();
    if (isLoading || data?.length == 0) {
        return <div>Loading...</div>;
    }
    return (
        <div className="flex flex-col">
            {data?.map((message, index) => {
                return (
                    <div
                        className="grid w-full grid-cols-5 gap-1 p-2"
                        key={
                            message.created_at.toLocaleString() +
                            "_" +
                            index.toString()
                        }
                    >
                        <div className="flex flex-col">
                            <span className="text-gray-800">
                                {message.created_at.toLocaleString()}
                            </span>
                            <span className="text-gray-400">
                                @{message?.fromUser?.name ?? "Unknown"}
                            </span>
                        </div>
                        {message.content.includes(
                            "https://www.tiktokv.com/share/video"
                        ) ? (
                            <Link
                                target={"_blank"}
                                href={message.content}
                                className="col-span-3 overflow-ellipsis"
                            >
                                <span>{message.content}</span>
                            </Link>
                        ) : (
                            <span className="col-span-3 overflow-ellipsis">
                                {message.content}
                            </span>
                        )}
                        <SeenBy message={message} />
                    </div>
                );
            })}
        </div>
    );
};
const SeenBy = ({
    message,
}: {
    message: RouterOutputs["messages"]["list"]["0"];
}) => {
    const utils = api.useContext();
    const seenMuation = api.messages.seen.useMutation({
        onSettled() {
            // Sync with server once mutation has settled
            void utils.messages.list.invalidate();
        },
        async onMutate(newPost) {
            // Cancel outgoing fetches (so they don't overwrite our optimistic update)
            await utils.messages.list.cancel();

            // Get the data from the queryCache
            const prevData = utils.messages.list.getData();

            // Optimistically update the data with our new post
            utils.messages.list.setData(undefined, (old) => {
                if (message.seenBy.length > 0) {
                    return old?.map((message) => {
                        if (message.id === newPost.messageId) {
                            return {
                                ...message,
                                seenBy: [],
                            };
                        }
                        return message;
                    });
                } else {
                    return old?.map((message) => {
                        if (message.id === newPost.messageId) {
                            return {
                                ...message,
                                seenBy: [
                                    {
                                        messageId: message.toUserId,
                                        seenAt: new Date(),
                                        userId: message.toUserId,
                                    },
                                ],
                            };
                        }
                        return message;
                    });
                }
            });

            // Return the previous data so we can revert if something goes wrong
            return { prevData };
        },
    });
    return (
        <>
            <button
                onClick={() =>
                    void seenMuation.mutate({ messageId: message.id })
                }
            >
                {message.seenBy.length === 0 ? (
                    <HandThumbUpIcon className="h-5 w-5 text-gray-400" />
                ) : (
                    <HandThumbUpIcon className="h-5 w-5 text-green-400" />
                )}
            </button>
        </>
    );
};
